#!/usr/bin/python
# this script starts the thing that does the thing
#
# comments starting with a capital letter are important ones
#
# requires python-paramiko

# Make a copy of the base image
image_baseimage = "debian-jessie-baseimage.qcow2"
image_tempimage = "temp.qcow2"

import os, shutil

# check the base image exists
if not os.path.exists(image_baseimage):
    print("cannot find base image " + image_baseimage)
    exit(0)

# delete the temp file if it exists
if os.path.exists(image_tempimage):
    os.remove(image_tempimage)

# copy the base image to a temp image
shutil.copyfile(image_baseimage, image_tempimage)


# Start the qemu session
import shlex, subprocess

# qemu-system-x86_64 -hda debian-jessie-baseimage.qcow2 -boot d -m 256 -net user,hostfwd=tcp::8162-:22 -net nic
command_line = "qemu-system-x86_64 -hda " + image_tempimage + " -boot d -m 256 -net user,hostfwd=tcp::8162-:22 -net nic"
args = shlex.split(command_line)
print(args)

proc = subprocess.Popen(args)

print("ELLO MATE")

# we need to sleep for 20s to allow the VM to boot. the ssh port does not need to be open
import time
time.sleep(200)

print("trying")


# Communicate with the VM over SSH

import paramiko.client

client = paramiko.client.SSHClient()

# auto accept the host key to this session (warning: security f*ck up)
client.set_missing_host_key_policy(paramiko.client.AutoAddPolicy())

# connect to the QEMU server
client.connect(hostname='127.0.0.1', port=8162, username='root', password='pass', look_for_keys=False)

# run a command
stdin, stdout, stderr = client.exec_command('ls -la /')

# print the command output
for line in stdout.readlines():
    print "line: " + line